CREATE DATABASE theatre

DROP DATABASE theatre

CREATE TRIGGER set_creation_date
    BEFORE INSERT ON building
    FOR EACH ROW
    BEGIN
        SET NEW.creation_date = NOW();
    END;

CREATE TRIGGER set_impresario_creation_date
    BEFORE INSERT ON impresario
    FOR EACH ROW
    BEGIN
        SET NEW.creation_date = NOW();
    END;

CREATE TRIGGER set_genre_creation_date
    BEFORE INSERT ON genre
    FOR EACH ROW
    BEGIN
        SET NEW.creation_date = NOW();
    END;

CREATE TRIGGER set_event_creation_date
    BEFORE INSERT ON event
    FOR EACH ROW
    BEGIN
        SET NEW.creation_date = NOW();
    END;

CREATE TRIGGER set_actor_creation_date
    BEFORE INSERT ON actor
    FOR EACH ROW
    BEGIN
        SET NEW.creation_date = NOW();
    END;

CREATE TRIGGER check_name_surname_no_digits
    BEFORE INSERT ON actor
    FOR EACH ROW
    BEGIN
        IF NEW.name REGEXP '[0-9]' THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Name cannot contain digits';
        END IF;
        IF NEW.surname REGEXP '[0-9]' THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Surname cannot contain digits';
        END IF;
    END

CREATE TRIGGER set_actor_genre_link_creation_date
    BEFORE INSERT ON actor_genre_link
    FOR EACH ROW
    BEGIN
        SET NEW.creation_date = NOW();
    END;

CREATE FUNCTION get_impresario_count(building_id INT) RETURNS INT DETERMINISTIC
    BEGIN
        DECLARE count INT;
        SELECT COUNT(*) INTO count FROM impresario WHERE impresario.building_id = building_id;
        RETURN count;
    END

CREATE FUNCTION get_genre_by_name(genre_name VARCHAR(255)) RETURNS VARCHAR(255) DETERMINISTIC
    BEGIN
        DECLARE genre VARCHAR(255);
        SELECT name INTO genre FROM genre WHERE name = genre_name;
        RETURN genre;
    END

CREATE PROCEDURE get_impresario_by_id(IN id INT)
    BEGIN
        SELECT * FROM impresario WHERE impresario.id = id;
    END

CREATE PROCEDURE add_building(IN building_name VARCHAR(255))
    BEGIN
        INSERT INTO building (name) VALUES (building_name);
    END

CREATE PROCEDURE add_impresario(IN building_id INT, IN name VARCHAR(255), IN surname VARCHAR(255), IN age INT, IN creation_date TIMESTAMP)
    BEGIN
        INSERT INTO impresario (building_id, name, surname, age, creation_date) VALUES (building_id, name, surname, age, creation_date);
    END

CREATE TABLE IF NOT EXISTS building (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    creation_date TIMESTAMP
)

CREATE TABLE IF NOT EXISTS impresario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    building_id INT,
    name VARCHAR(255),
    surname VARCHAR(255),
    age INT,
    creation_date TIMESTAMP,

    FOREIGN KEY (building_id) REFERENCES building(id)
)

CREATE TABLE IF NOT EXISTS genre (
    name VARCHAR(255) PRIMARY KEY,
    creation_date TIMESTAMP
)

CREATE TABLE IF NOT EXISTS event (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    genre_name VARCHAR(255),
    impresario_id INT,
    creation_date TIMESTAMP,

    FOREIGN KEY (genre_name) REFERENCES genre(name),
    FOREIGN KEY (impresario_id) REFERENCES impresario(id)
)

CREATE TABLE IF NOT EXISTS actor (
    id INT AUTO_INCREMENT PRIMARY KEY,
    event_id INT,
    building_id INT,
    name VARCHAR(255),
    surname VARCHAR(255),
    age INT,
    creation_date TIMESTAMP,
    
    FOREIGN KEY (event_id) REFERENCES event(id),
    FOREIGN KEY (building_id) REFERENCES building(id)
)

CREATE TABLE IF NOT EXISTS actor_genre_link (
    actor_id INT,
    genre_name VARCHAR(255),
    creation_date TIMESTAMP,

    FOREIGN KEY (actor_id) REFERENCES actor(id) ON DELETE CASCADE,
    FOREIGN KEY (genre_name) REFERENCES genre(name) ON DELETE CASCADE
)

INSERT INTO building (name) VALUES 
    ('Небесная башня'),
    ('Сапфировый дом'),
    ('Эмеральдовые вершины'),
    ('Золотой горизонт'),
    ('Дом культуры');

INSERT INTO impresario (building_id, name, surname, age) VALUES 
    (1, 'Алиса', 'Сизых', 28),
    (2, 'Татьяна', 'Белая', 32),
    (3, 'Сара', 'Тайлор', 27),
    (4, 'Джон', 'Смит', 35),
    (5, 'Мария', 'Джонсон', 42),
    (1, 'Евгений', 'Уильямс', 29),
    (2, 'Эмили', 'Блэк', 31),
    (3, 'Уильям', 'Дэвис', 26),
    (4, 'Оливия', 'Миллер', 39),
    (5, 'Даниил', 'Польский', 33),
    (1, 'София', 'Мур', 45),
    (2, 'Михаил', 'Тайлор', 37),
    (3, 'Эмма', 'Андерсон', 30),
    (4, 'Александр', 'Томас', 34),
    (5, 'Грейс', 'Джексон', 41);

INSERT INTO genre (name) VALUES 
    ('Драма'),
    ('Комедия'),
    ('Симфония'),
    ('Опера'),
    ('Романтика'),
    ('Балет'),
    ('Документальный'),
    ('Мистика'),
    ('Фантастика'),
    ('Научно-популярный'),
    ('Мюзикл'),
    ('Анимация')

INSERT INTO event (name, genre_name, impresario_id) VALUES
    ('Последний вздох', 'Драма', 1),
    ('Вставай', 'Комедия', 2),
    ('Ее след', 'Романтика', 3),
    ('Отличник с личной жизнью', 'Фантастика', 4),
    ('Астрал', 'Мистика', 5),
    ('Пара по психологии', 'Комедия', 6),
    ('Щелкунчик', 'Балет', 7),
    ('Лебединое озеро', 'Балет', 8),
    ('Рад вас видеть', 'Комедия', 9),
    ('Кошки', 'Мюзикл', 10),
    ('Спящая красавица', 'Балет', 11),
    ('Film Screening', 'Анимация', 12),
    ('Дон Кихот', 'Балет', 13),
    ('Баядерка', 'Балет', 14),
    ('Жизель', 'Балет', 15);

INSERT INTO actor (event_id, building_id, name, surname, age) VALUES 
    (1, 1, 'Джон', 'До', 30),
    (2, 2, 'Джейн', 'Смит', 25),
    (4, 3, 'Сара', 'Уильямс', 28),
    (5, 4, 'Алекс', 'Сизых', 32),
    (6, 5, 'Эмили', 'Дэвис', 27),
    (3, 1, 'Майк', 'Джонсон', 35),
    (7, 2, 'Крис', 'Мартинез', 29),
    (8, 3, 'Аманда', 'Гарция', 31),
    (9, 4, 'Кевин', 'Родригез', 33),
    (10, 5, 'Лаура', 'Лопез', 26),
    (11, 1, 'Марк', 'Перез', 34),
    (12, 2, 'Линда', 'Санчез', 30);

INSERT INTO actor_genre_link (actor_id, genre_name) VALUES
    (1, 'Драма'),
    (2, 'Драма'),
    (3, 'Драма'),
    (2, 'Комедия'),
    (3, 'Комедия'),
    (4, 'Комедия'),
    (3, 'Симфония'),
    (4, 'Симфония'),
    (5, 'Симфония'),
    (4, 'Опера'),
    (5, 'Опера'),
    (6, 'Опера'),
    (5, 'Романтика'),
    (6, 'Романтика'),
    (7, 'Романтика'),
    (8, 'Романтика'),
    (9, 'Балет'),
    (7, 'Документальный'),
    (8, 'Документальный'),
    (8, 'Мистика'),
    (9, 'Мистика'),
    (10, 'Мистика'),
    (11, 'Мистика'),
    (7, 'Фантастика'),
    (8, 'Фантастика'),
    (9, 'Фантастика'),
    (10, 'Научно-популярный'),
    (11, 'Мюзикл'),
    (12, 'Анимация')
